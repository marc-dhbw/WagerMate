@page "/invitation-code"
@using WagerMate.Service_Implementation.auth
@using WagerMate.Service_Implementation.betting
@using WagerMate.Service_Implementation.user
@using WagerMate.Services.auth
@using WagerMate.Services.betting
@using WagerMate.Services.user
@rendermode InteractiveServer
@inject IBetService BetService
@inject ICaseService CaseService
@inject IUserBetService UserBetService
@inject ICookieService CookieService
@inject IUserService UserService
@inject NavigationManager Navigation

<h3>Invitation Code</h3>

<div class="form-group">
    <label for="inviteCode">Invite Code:</label>
    <input @bind="inviteCode" class="form-control" id="inviteCode" placeholder="Enter your invitation code here..."/>
</div>

<button class="btn btn-primary" @onclick="SubmitCode">Submit</button>

@* @if (!string.IsNullOrEmpty(submittedInviteCode)) *@
@* { *@
@*     <p class="alert alert-success">Invite Code Submitted: @submittedInviteCode</p> *@
@* } *@

@if (displayBetInputs)
{

    <label for="moneyValue">Ammount: </label>
    <input id="moneyValue" type="number" @bind="_moneyValue"/>
    <button @onclick="SubmitValues">Submit</button>
}
@if (createdNewUserBet)
{
    <p class="alert alert-success">You are now participating in the bet!</p>
}

@code {
    //AutoRedirect to the LoginPage
    private bool _firstLogin = true;
    private User? _loggedInUser = new();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await CookieService.RedirectToLogin("CookieID", Navigation);
        var value = await CookieService.GetCookieByName("CookieID");
        if (_firstLogin)
        {
            _loggedInUser = UserService.GetUserIfPasswordExists(value);
            if (_loggedInUser != null)
            {
                _firstLogin = false;
            }
        }
    }
    
    private string inviteCode { get; set; }
    private string submittedInviteCode { get; set; }
    private bool displayBetInputs { get; set; } = false;
    private int _moneyValue { get; set; }
    private Bet _acceptedBet { get; set; }
    private bool createdNewUserBet { get; set; }

    private void SubmitCode()
    {
        Console.WriteLine("SubmitCode method called");

        submittedInviteCode = inviteCode;

        _acceptedBet = BetService.GetBetByInviteCode(submittedInviteCode);
        if (_acceptedBet == null)
        {
            submittedInviteCode = "No such code found";
            Console.WriteLine("Invite Code not found!");
            return;
        }

        submittedInviteCode = "";
        displayBetInputs = true;
    }

    private void SubmitValues()
    {
        //create case
        Case tempCase = new Case();
        tempCase.Bet_Id = _acceptedBet.Id;
        tempCase.Casetype = "Money";
        Console.WriteLine("Created Case");
        tempCase.Id = CaseService.CreateCase(tempCase);
        Console.WriteLine("CaseSercie: Created Case");
        //create userbet
        UserBet tempUserBet = new UserBet();
        tempUserBet.Bet_Id = _acceptedBet.Id;
        tempUserBet.User_Id = _loggedInUser.Id;
        tempUserBet.Amount = _moneyValue;
        tempUserBet.Case_Id = tempCase.Id;
        Console.WriteLine("Created UserBet");
        UserBetService.CreateUserBet(tempUserBet);
        Console.WriteLine("UserBetService: Created UserBet");
        
        createdNewUserBet = true;

    }
}