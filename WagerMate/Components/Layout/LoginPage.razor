@page "/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Mvc.Infrastructure
@using WagerMate.Services.auth
@using WagerMate.Services.user

@layout LoginLayout
@rendermode InteractiveServer
@inject IUserService UserService;
@inject NavigationManager Navigation
@inject ICookieService CookieService;
@inject IHashService HashService

<div class="column">
    <div id="leftSide" class="half">
        <h1>WagerMate</h1>

        <p>Welcome Back!</p>

        <EditForm Model="@_existingUserData" OnValidSubmit="HandleLogin" FormName="FormLogin" method="post">
            <DataAnnotationsValidator/>
            <div class="field">
                <div>
                    <label>E-mail address:</label>
                </div>
                <InputText class="input" @bind-Value="_existingUserData.EMail"/>
                <ValidationMessage For="@(() => _existingUserData.EMail)"/>
            </div>
            <div class="field">
                <div>
                    <label>Password:</label>
                </div>
                <InputText class="input" type="password" @bind-Value="_existingUserData.Password"/>
                <ValidationMessage For="@(() => _existingUserData.Password)"/>
            </div>
            <div id="loginspace">
                <input id="login" type="submit" value="Log in"/>
            </div>
        </EditForm>
    </div>

    <div id="rightSide" class="half">
        <h1>WagerMate</h1>

        <p>Welcome Mate!</p>

        <EditForm Model="@_newUserData" OnValidSubmit="HandleRegister" FormName="FormRegister">
            <DataAnnotationsValidator/>
            <div class="field">
                <div>
                    <label>Username:</label>
                </div>
                <InputText class="input" @bind-Value="_newUserData.Username"/>
                <ValidationMessage For="@(() => _newUserData.Username)"/>
            </div>
            <div class="field">
                <div>
                    <label>E-mail address:</label>
                </div>
                <InputText class="input" @bind-Value="_newUserData.EMail"/>
                <ValidationMessage For="@(() => _newUserData.EMail)"/>
            </div>
            <div class="field">
                <div>
                    <label>Password:</label>
                </div>
                <InputText class="input" type="password" @bind-Value="_newUserData.Password"/>
                <ValidationMessage For="@(() => _newUserData.Password)"/>
            </div>
            <div class="field">
                <div>
                    <label>Repeat Password:</label>
                </div>
                <InputText class="input" type="password" @bind-Value="_newUserData.PasswordRepeat"/>
                <ValidationMessage For="@(() => _newUserData.PasswordRepeat)"/>
            </div>
            <div class="field">
                <div>
                    <label>Enter Invite Code:</label>
                </div>
                <InputText class="input" @bind-Value="_newUserData.InviteCode"/>
                <ValidationMessage For="@(() => _newUserData.InviteCode)"/>
            </div>
            <div id="registerspace">
                <input id="register" type="submit" value="Register">
            </div>
        </EditForm>
    </div>
</div>


@code {
    private readonly ExistingUserData _existingUserData = new();

    public class ExistingUserData
    {
        [Required(ErrorMessage = "E-mail address is required!")]
        [EmailAddress(ErrorMessage = "Invalid e-mail address!")]
        [AccountWithEmailExists]
        public string? EMail { get; set; }

        [Required(ErrorMessage = "Password is required!")]
        [PasswordCorrect("EMail")]
        public string? Password { get; set; }

        public string? PasswordValidation { get; set; }
    }

    private readonly NewUserData _newUserData = new();

    public class NewUserData
    {
        [Required(ErrorMessage = "E-mail address is required!")]
        [EmailAddress(ErrorMessage = "Invalid e-mail address!")]
        [EmailAvailable]
        public string? EMail { get; set; }

        [Required(ErrorMessage = "Username is required!")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Password is required!")]
        public string? Password { get; set; }

        [Required(ErrorMessage = "Repetition of password is required!")]
        [Compare("Password", ErrorMessage = "Must match Password!")]
        public string? PasswordRepeat { get; set; }

        [Required(ErrorMessage = "Invite code is required!")]
        [CompareInviteCode("42", ErrorMessage = "Invalid invite code!")]
        public string? InviteCode { get; set; }
    }

    public class CompareInviteCodeAttribute(string validCode) : ValidationAttribute
    {
        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            if (value == null || value.ToString() != validCode)
            {
                return new ValidationResult(ErrorMessage ?? "Invalid invite code!");
            }

            return ValidationResult.Success;
        }
    }

    public class EmailAvailableAttribute : ValidationAttribute
    {
        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            var email = value as string;
            var userService = (IUserService)validationContext.GetService(typeof(IUserService));
            var emailExists = userService.EmailIsRegistered(email);

            if (emailExists)
            {
                return new ValidationResult("An account with this email address already exists!");
            }
            
            return ValidationResult.Success;
        }
    }

    public class AccountWithEmailExistsAttribute : ValidationAttribute
    {
        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            var email = value as string;
            var userService = (IUserService)validationContext.GetService(typeof(IUserService));
            var emailExists = userService.EmailIsRegistered(email);

            if (!emailExists)
            {
                return new ValidationResult("There is no account with this email address!");
            }

            return ValidationResult.Success;
        }
    }

    public class PasswordCorrectAttribute : ValidationAttribute
    {
        private readonly string _emailPropertyName;

        public PasswordCorrectAttribute(string emailPropertyName)
        {
            _emailPropertyName = emailPropertyName;
        }

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var password = value as string;
            var emailProperty = validationContext.ObjectType.GetProperty(_emailPropertyName);
            var email = emailProperty.GetValue(validationContext.ObjectInstance) as string;

            var userService = (IUserService)validationContext.GetService(typeof(IUserService));
            var hashService = (IHashService)validationContext.GetService(typeof(IHashService));
            var user = userService.GetUserByEmail(email);

            if (!hashService.CreateHash(email, password).Equals(user.Password))
            {
                return new ValidationResult("Incorrect password!");
            }
            
            return ValidationResult.Success;
        }
    }


    private async Task HandleLogin()
    {
        try
        {
            var user = UserService.GetUserByEmail(_existingUserData.EMail!);
            if (HashService.CreateHash(_existingUserData.EMail!, _existingUserData.Password!).Equals(user.Password))
            {
                Console.WriteLine("Login successful.");
                await CookieService.SetCookieByNameAndValue("CookieID", user.Password, 7);
                Navigation.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Invalid password.");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Console.WriteLine("Not registered E-Mail.");
        }
    }


    public async Task HandleRegister()
    {
        if (!UserService.EmailIsRegistered(_newUserData.EMail!))
        {
            var registeredUser = RegisterUser();
            if (registeredUser!= null && registeredUser.Password != null)
            {
                await CookieService.SetCookieByNameAndValue("CookieID", registeredUser.Password, 7);
                Navigation.NavigateTo("/");
            }
        }
        else
        {
            Console.WriteLine("E-Mail is already taken.");

        }
    }

    private User? RegisterUser()
    {
        if ((_newUserData.Username == null) | (_newUserData.EMail == null)) return null;
        var user2 = new User
        {
            Name = _newUserData.Username,
            Email = _newUserData.EMail,
            Password = HashService.CreateHash(_newUserData.EMail!, _newUserData.Password!)
        };

        try
        {
            UserService.CreateUser(user2);
            return user2;
        }
        catch (Exception)
        {
            Console.WriteLine("service failed");
            throw;
        }
    }

}